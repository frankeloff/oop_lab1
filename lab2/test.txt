// void insert(Rhombus &&rhomb, int pos);
// void pop_back();
// void push_front(Rhombus &&rhomb);
// void pop_front();
// TVectorItem* TVector::back()
// {
//     TVectorItem* front = this->first;
//     while(front->next != nullptr)
//     {
//         front = front->next;
//     }
//     return front;
// }

// TVectorItem* TVector::front()
// {
//     return this->first;
// }

/*----void----*/

// void TVector::pop_back()
// {
//     TVectorItem* del = this->first;
//     TVectorItem* prev_del;
//     if(size == 0)
//     {
//         std::cout << "List is empty" << std::endl;
//     }
//     else
//     {
//         while(del->next != nullptr)
//         {
//             prev_del = del;
//             del = del->next;
//             delete prev_del;
//         }
//         delete del;
//         size = 0;
//         std::cout << "TVector deleted" << std::endl;
//     } 
// }

// void TVector::push_front(Rhombus &&rhomb)
// {
//     TVectorItem* value = new TVectorItem(rhomb);
//     if(size == 0)
//     {
//         this->first = value;
//         this->first->next = nullptr;
//         this->first = value;
//         size++;
//     }
//     else
//     {
//     value->next = this->first;
//     this->first = value;
//     size++;
//     }
// }
// void TVector::pop_front()
// {
//     if(size == 0)
//     {
//         std::cout << "List is empty" << std::endl;
//     }
//     else if(size == 1)
//     {
//         size--;
//         delete this->first;
//     }
//     else
//     {
//     TVectorItem* del = this->first;
//     TVectorItem* save = this->first;
//     save = save->next;
//     this->first = save;
//     size--;
//     delete del;
//     }
// }

// void TVector::insert(Rhombus &&rhomb, int pos) //correct pos > 0!
// {
//     if(pos > size + 1 || pos < 1)
//     {
//         throw std::invalid_argument("Invalid Insert");
//     }
//     else
//     {
//         TVectorItem* ins = new TVectorItem(rhomb);
//         TVectorItem* prev_ins;
//         TVectorItem* next_ins = this->first;
//         size++;
//         if(pos == 1)
//         {
//             ins->next = this->first;
//             this->first = ins;
//         }
//         else if(pos > size)
//         {
//             while(next_ins->next != nullptr)
//             {
//                 next_ins = next_ins->next;
//             }
//             next_ins->next = ins;
//             ins->next = nullptr;
//         }
//         else
//         {
//             for(int i = 0; i < pos - 1; ++i)
//                 {
//                     prev_ins = next_ins;
//                     next_ins = next_ins->next;
//                 }
//             prev_ins->next = ins;
//             ins->next = next_ins;   
//         }
//     }  
// }